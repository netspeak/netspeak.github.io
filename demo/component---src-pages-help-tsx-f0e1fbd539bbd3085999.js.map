{"version":3,"sources":["webpack:///./src/page-elements/help-page.tsx","webpack:///./src/pages/help.tsx"],"names":["HelpPage","lang","getCurrentLang","l","createLocalizer","locales","Toc","links","fn","props","className","key","map","level","id","name","href","children","h2","push","H2","newToc","H3","data","i","title","P","desc","corpus","defaultQuery","query","defaultExampleVisibility","pageSize","Email","address","en","help","contact","contactP","how","howP","examples","exampleData","devs","devsP","target","rel","de","Help","dynamic","Helmet"],"mappings":"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","file":"component---src-pages-help-tsx-f0e1fbd539bbd3085999.js","sourcesContent":["import React from \"react\";\nimport \"./help-page.scss\";\nimport { getCurrentLang, Locales, SimpleLocale, createLocalizer, SupplierLocale } from \"../lib/localize\";\nimport Page from \"./page\";\nimport { NetspeakSearch } from \"../elements/netspeak-search\";\n\nexport default function HelpPage(): JSX.Element {\n\tconst lang = getCurrentLang();\n\tconst l = createLocalizer({ lang }, locales);\n\n\tconst Toc = newToc();\n\n\treturn (\n\t\t<Page lang={lang} className=\"HelpPage\">\n\t\t\t<h1 className=\"article\">{l(\"help\")}</h1>\n\n\t\t\t<Toc>\n\t\t\t\t{Toc.h2(\"contact\", l(\"contact\"))}\n\t\t\t\t{l(\"contactP\")()}\n\n\t\t\t\t{Toc.h2(\"how\", l(\"how\"))}\n\t\t\t\t{l(\"howP\")()}\n\n\t\t\t\t<H3 id=\"examples\">{l(\"examples\")}</H3>\n\t\t\t\t{l(\"exampleData\").map((data, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i} className=\"group-box\">\n\t\t\t\t\t\t\t<div className=\"group-title\">{data.title}</div>\n\t\t\t\t\t\t\t<div className=\"group-content\">\n\t\t\t\t\t\t\t\t<P>{data.desc()}</P>\n\t\t\t\t\t\t\t\t<NetspeakSearch\n\t\t\t\t\t\t\t\t\tlang={lang}\n\t\t\t\t\t\t\t\t\tcorpus=\"web-en\"\n\t\t\t\t\t\t\t\t\tdefaultQuery={data.query}\n\t\t\t\t\t\t\t\t\tdefaultExampleVisibility=\"hidden\"\n\t\t\t\t\t\t\t\t\tpageSize={10}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\n\t\t\t\t{Toc.h2(\"for-developers\", l(\"devs\"))}\n\t\t\t\t{l(\"devsP\")()}\n\t\t\t</Toc>\n\t\t</Page>\n\t);\n}\n\nfunction P(props: { children: React.ReactNode }): JSX.Element {\n\treturn <p className=\"article\">{props.children}</p>;\n}\nfunction H2(props: { id: string; children: React.ReactNode }): JSX.Element {\n\treturn (\n\t\t<a href={\"#\" + props.id} className=\"article\">\n\t\t\t<h2 id={props.id} className=\"article\">\n\t\t\t\t{props.children}\n\t\t\t</h2>\n\t\t</a>\n\t);\n}\nfunction H3(props: { id: string; children: React.ReactNode }): JSX.Element {\n\treturn (\n\t\t<h3 id={props.id} className=\"article\">\n\t\t\t{props.children}\n\t\t</h3>\n\t);\n}\n\ninterface TocFnProps {\n\tkey?: string | number;\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n}\ninterface TocFn {\n\t(props: TocFnProps): JSX.Element;\n\th2(id: string, name: string): JSX.Element;\n}\n\nfunction newToc(): TocFn {\n\tconst links: { level: number; id: string; name: string }[] = [];\n\n\tfunction fn(props: TocFnProps): JSX.Element {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className={\"toc\" + (props.className ? \" \" + props.className : \"\")} key={props.key}>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{links.map(({ level, id, name }) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={id} className={\"h\" + level}>\n\t\t\t\t\t\t\t\t\t<span className=\"icon\"></span>\n\t\t\t\t\t\t\t\t\t<a href={\"#\" + id} className=\"article\">\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t{props.children}\n\t\t\t</>\n\t\t);\n\t}\n\tfn.h2 = (id: string, name: string): JSX.Element => {\n\t\tlinks.push({ level: 2, id, name });\n\t\treturn <H2 id={id}>{name}</H2>;\n\t};\n\n\treturn fn;\n}\n\nfunction Email(props: { address: string }): JSX.Element {\n\treturn (\n\t\t<a href={\"mailto:\" + props.address} className=\"article\">\n\t\t\t{props.address}\n\t\t</a>\n\t);\n}\n\ninterface ExampleData {\n\ttitle: string;\n\tdesc: () => JSX.Element;\n\tquery: string;\n}\n\nconst locales: Locales<\n\tSimpleLocale<\"help\" | \"contact\" | \"how\" | \"examples\" | \"devs\"> &\n\t\tSupplierLocale<\"contactP\" | \"howP\" | \"devsP\"> & {\n\t\t\texampleData: ExampleData[];\n\t\t}\n> = {\n\ten: {\n\t\thelp: \"Help\",\n\n\t\tcontact: \"Contact\",\n\t\tcontactP: () => (\n\t\t\t<P>\n\t\t\t\tEmail: <Email address=\"info@netspeak.org\" />\n\t\t\t</P>\n\t\t),\n\n\t\thow: \"How Netspeak works\",\n\t\thowP: () => (\n\t\t\t<P>\n\t\t\t\tNetspeak is a search engine designed to help you to express yourself in a foreign language by providing\n\t\t\t\tyou with insight on how common native speakers use certain phrases. The following examples illustrate\n\t\t\t\thow you can use Netspeak to query phrases.\n\t\t\t</P>\n\t\t),\n\n\t\texamples: \"Examples\",\n\t\texampleData: [\n\t\t\t{\n\t\t\t\ttitle: \"Find one word\",\n\t\t\t\tdesc: () => <>Use a question mark in your query to search for a missing word.</>,\n\t\t\t\tquery: \"waiting ? response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find at least one word\",\n\t\t\t\tdesc: () => <>Use a plus in your query to search for missing words.</>,\n\t\t\t\tquery: \"waiting + response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find two or more words\",\n\t\t\t\tdesc: () => <>Use a two or more question marks to find as many words for them.</>,\n\t\t\t\tquery: \"waiting ? ? response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find any number of words\",\n\t\t\t\tdesc: () => <>Use dots, to find zero, one, two, or more words at the same time.</>,\n\t\t\t\tquery: \"waiting * response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find the best option\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>Use square brackets to check which of two or more words is most common, or if none applies.</>\n\t\t\t\t),\n\t\t\t\tquery: \"the same [ like as ]\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find the best order\",\n\t\t\t\tdesc: () => <>Use curly brackets to check in which order two or more words are commonly written.</>,\n\t\t\t\tquery: \"{ only for members }\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Find the best synonym\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>Use the hash sign in front of a word to check which of its synonyms are commonly written.</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting * #response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Compare phrases\",\n\t\t\t\tdesc: () => <>Use the pipe symbol between phrases to get a comparison.</>,\n\t\t\t\tquery: \"waiting ? ? response | waiting ? response\",\n\t\t\t},\n\t\t],\n\n\t\tdevs: \"For developers\",\n\t\tdevsP: () => (\n\t\t\t<P>\n\t\t\t\t<a className=\"article\" href=\"https://github.com/netspeak\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tGitHub\n\t\t\t\t</a>\n\t\t\t</P>\n\t\t),\n\t},\n\tde: {\n\t\thelp: \"Hilfe\",\n\n\t\tcontact: \"Kontakt\",\n\t\tcontactP: () => (\n\t\t\t<P>\n\t\t\t\tEmail: <Email address=\"info@netspeak.org\" />\n\t\t\t</P>\n\t\t),\n\n\t\thow: \"So funktioniert Netspeak\",\n\t\thowP: () => (\n\t\t\t<P>\n\t\t\t\tNetspeak ist eine Suchmaschine, die ihnen hilft sich in einer fremden Sprache auszudrücken, indem es dir\n\t\t\t\tanzeigt wie häufig Muttersprachler bestimmte Wendungen nutzen. Die folgenden Beispiele zeigen, wie sie\n\t\t\t\tmit Netspeak Wendungen und Wortgruppen abfragen.\n\t\t\t</P>\n\t\t),\n\n\t\texamples: \"Beispiele\",\n\t\texampleData: [\n\t\t\t{\n\t\t\t\ttitle: \"Ein Wort finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tDas Fragezeichen steht für genau ein Wort. Verwenden Sie es irgendwo in ihrer Anfrage, um nach\n\t\t\t\t\t\tdem dort passenden Wort zu suchen.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting ? response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Mindestens ein Wort finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tDas Plus steht für mindestens ein Wort. Verwenden Sie es irgendwo in ihrer Anfrage, um nach dem\n\t\t\t\t\t\tdort passenden Wort/Wörtern zu suchen.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting + response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Zwei oder mehr Wörter finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tZwei Fragezeichen hintereinander stehen für genau zwei Wörter. Verwenden Sie mehr Fragezeichen,\n\t\t\t\t\t\tum nach entsprechend vielen Wörtern zu suchen.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting ? ? response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Beliebig viele Wörter finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tDie Punkte stehen für beliebig viele Wörter. Verwenden Sie sie, um gleichzeitig nach ein, zwei\n\t\t\t\t\t\toder mehr passenden Wörtern zu suchen.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting * response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Die bessere Alternative finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tUm zu prüfen, welches von zwei oder mehr Wörtern eher geschrieben wird, oder ob keins davon\n\t\t\t\t\t\tzutrifft, verwenden Sie eckige Klammern.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"the same [ like as ]\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Die richtige Reihenfolge finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tUm zu prüfen, in welcher Reihenfolge zwei oder mehr Wörter geschrieben werden, verwenden sie\n\t\t\t\t\t\tgeschweifte Klammern.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"{ only for members }\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Das häufigste Synonym finden\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\tUm zu prüfen, welches Synonym eines Wortes am häufigsten geschrieben wird, verwenden Sie das\n\t\t\t\t\t\tDoppelkreuz vor dem Wort.\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting * #response\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Wortgruppen vergleichen\",\n\t\t\t\tdesc: () => (\n\t\t\t\t\t<>Um die Häufigkeit von Wortgruppen zu vergleichen trennen sie diese durch das Pipe-Symbol.</>\n\t\t\t\t),\n\t\t\t\tquery: \"waiting ? ? response | waiting ? response\",\n\t\t\t},\n\t\t],\n\n\t\tdevs: \"Für Entwickler\",\n\t\tdevsP: () => (\n\t\t\t<P>\n\t\t\t\t<a className=\"article\" href=\"https://github.com/netspeak\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\tGitHub\n\t\t\t\t</a>\n\t\t\t</P>\n\t\t),\n\t},\n};\n","import React from \"react\";\nimport HelpPage from \"../page-elements/help-page\";\nimport { Helmet } from \"react-helmet\";\nimport GA from \"../page-elements/ga\";\nimport dynamic from \"../lib/dynamic\";\n\nexport default function Help(): JSX.Element {\n\treturn (\n\t\t<>\n\t\t\t{dynamic(() => (\n\t\t\t\t<HelpPage />\n\t\t\t))}\n\t\t\t<Helmet>\n\t\t\t\t<title>Help - Netspeak</title>\n\t\t\t\t<GA />\n\t\t\t</Helmet>\n\t\t</>\n\t);\n}\n"],"sourceRoot":""}