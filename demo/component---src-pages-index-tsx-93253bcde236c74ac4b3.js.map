{"version":3,"sources":["webpack:///./src/elements/netspeak-corpus-selector.tsx","webpack:///./src/lib/query-history.ts","webpack:///./src/lib/hash.ts","webpack:///./src/page-elements/search-page.tsx","webpack:///./src/pages/index.tsx"],"names":["NetspeakCorpusSelector","props","corpora","defaultSorting","l","createLocalizer","locales","handleButtonClick","e","corpusKey","currentTarget","value","corpus","find","c","key","Error","onCorpusSelected","sorted","sort","a","b","indexA","indexOf","language","indexB","length","selectedCorpus","selected","defaultCorpus","setTimeout","buttons","map","classList","push","unavailable","has","className","join","onClick","name","toLowerCase","en","de","QueryHistory","items","query","this","some","i","filter","limit","maxLength","slice","toJSON","JSON","stringify","fromJSON","json","parse","listeners","Set","callAllListeners","forEach","lastHash","undefined","window","addEventListener","location","hash","setInterval","KNOWN_CORPORA","SearchPage","lang","getCurrentLang","state","withCorpus","getPageParam","unavailableCorpora","pageQuery","currentQuery","queryId","nextId","exampleVisibility","loadExampleVisibility","_onHashUpdateHandler","pageCorpus","setState","currentCorpusKey","_onCorpusSelectedHandler","setPageParam","_onQueryCommitHandler","history","trim","storyQueryHistory","_onSetExampleVisibilityHandler","visibility","storeExampleVisibility","componentDidMount","listener","_corporaPromise","CancelablePromise","Netspeak","instance","queryCorpora","then","info","available","ignoreCanceled","catch","reason","console","error","add","componentWillUnmount","cancel","delete","render","optional","defaultQuery","onCommitQuery","defaultExampleVisibility","onSetExampleVisibility","pageSize","autoFocus","React","PureComponent","loadQueryHistory","getHashParams","URLSearchParams","substr","param","get","params","set","toString","setHashParams","stored","localStorage","getItem","setItem","sessionStorage","Home","dynamic","Helmet","content"],"mappings":"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","file":"component---src-pages-index-tsx-93253bcde236c74ac4b3.js","sourcesContent":["import React from \"react\";\nimport \"./netspeak-corpus-selector.scss\";\nimport { LocalizableProps, Locales, SimpleLocale, createLocalizer } from \"../lib/localize\";\nimport { Corpus } from \"../lib/netspeak\";\n\ninterface Props extends LocalizableProps {\n\tselected?: string;\n\tcorpora: readonly Corpus[];\n\tunavailable: ReadonlySet<Corpus>;\n\tonCorpusSelected: (corpus: Corpus) => void;\n}\n\nexport default function NetspeakCorpusSelector(props: Props): JSX.Element {\n\tconst l = createLocalizer(props, locales);\n\tconst handleButtonClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n\t\tconst corpusKey = e.currentTarget.value;\n\t\tconst corpus = props.corpora.find(c => c.key === corpusKey);\n\t\tif (!corpus) {\n\t\t\tthrow new Error(`Cannot find corpus with key \"${corpusKey}\".`);\n\t\t}\n\t\tprops.onCorpusSelected(corpus);\n\t};\n\n\tconst sorted = sortedCorpora(props.corpora);\n\n\t// the selected corpus will be the one whose key is given or the first one\n\tlet selectedCorpus = sorted.find(c => c.key === props.selected);\n\tif (!selectedCorpus && sorted.length > 0) {\n\t\tconst defaultCorpus = sorted[0];\n\t\tselectedCorpus = defaultCorpus;\n\t\tsetTimeout(() => {\n\t\t\tprops.onCorpusSelected(defaultCorpus);\n\t\t}, 1);\n\t}\n\n\tconst buttons = sorted.map(corpus => {\n\t\tconst classList: string[] = [];\n\t\tif (corpus === selectedCorpus) {\n\t\t\tclassList.push(\"selected\");\n\t\t}\n\t\tif (props.unavailable.has(corpus)) {\n\t\t\tclassList.push(\"unavailable\");\n\t\t}\n\n\t\treturn (\n\t\t\t<button key={corpus.key} className={classList.join(\" \")} value={corpus.key} onClick={handleButtonClick}>\n\t\t\t\t{l((\"label-\" + corpus.name.toLowerCase()) as any) || corpus.name}\n\t\t\t</button>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"NetspeakCorpusSelector\">\n\t\t\t<div className=\"wrapper\">{buttons}</div>\n\t\t</div>\n\t);\n}\n\nconst locales: Locales<SimpleLocale<\"label-english\" | \"label-german\">> = {\n\ten: {\n\t\t\"label-english\": \"English\",\n\t\t\"label-german\": \"German\",\n\t},\n\tde: {\n\t\t\"label-english\": \"Englisch\",\n\t\t\"label-german\": \"Deutsch\",\n\t},\n};\n\nfunction sortedCorpora(corpora: Iterable<Corpus>): Corpus[] {\n\tconst defaultSorting = [\"en\", \"de\"];\n\n\treturn [...corpora].sort((a, b) => {\n\t\tlet indexA = defaultSorting.indexOf(a.language);\n\t\tlet indexB = defaultSorting.indexOf(b.language);\n\t\tif (indexA === -1) indexA = defaultSorting.length;\n\t\tif (indexB === -1) indexB = defaultSorting.length;\n\t\treturn indexA - indexB;\n\t});\n}\n","export class QueryHistory {\n\tconstructor(public readonly items: readonly string[] = []) {}\n\n\tpush(query: string): QueryHistory {\n\t\tif (this.items.some(i => i === query)) {\n\t\t\treturn new QueryHistory([query, ...this.items.filter(i => i !== query)]);\n\t\t} else {\n\t\t\treturn new QueryHistory([query, ...this.items]);\n\t\t}\n\t}\n\tlimit(maxLength: number): QueryHistory {\n\t\tif (this.items.length <= maxLength) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new QueryHistory(this.items.slice(0, maxLength));\n\t\t}\n\t}\n\n\ttoJSON(): string {\n\t\treturn JSON.stringify(this.items);\n\t}\n\tstatic fromJSON(json: string): QueryHistory {\n\t\treturn new QueryHistory(JSON.parse(json));\n\t}\n}\n","export type Listener = () => void;\n\nconst listeners = new Set<Listener>();\nexport function addHashChangeListener(listener: Listener): void {\n\tlisteners.add(listener);\n}\nexport function removeHashChangeListener(listener: Listener): void {\n\tlisteners.delete(listener);\n}\n\nfunction callAllListeners(): void {\n\tlisteners.forEach(l => l());\n}\n\n// This will add a listener for the \"hashchange\" event and it will periodically check the hash in case the event didn't\n// fire for some reason (yes, that happens).\nlet lastHash: string | undefined = undefined;\nif (typeof window !== \"undefined\") {\n\twindow.addEventListener(\"hashchange\", () => {\n\t\tlastHash = location.hash;\n\t\tcallAllListeners();\n\t});\n\tsetInterval(() => {\n\t\tif (lastHash !== undefined) {\n\t\t\tconst hash = location.hash;\n\t\t\tif (lastHash !== hash) {\n\t\t\t\tlastHash = location.hash;\n\t\t\t\tcallAllListeners();\n\t\t\t}\n\t\t}\n\t}, 10);\n}\n","import React from \"react\";\nimport \"./search-page.scss\";\nimport NetspeakCorpusSelector from \"../elements/netspeak-corpus-selector\";\nimport { getCurrentLang } from \"../lib/localize\";\nimport { NetspeakSearch, ExampleVisibility } from \"../elements/netspeak-search\";\nimport { Corpus, CorporaInfo, Netspeak } from \"../lib/netspeak\";\nimport { CancelablePromise, ignoreCanceled } from \"../lib/cancelable-promise\";\nimport { optional, nextId } from \"../lib/util\";\nimport { QueryHistory } from \"../lib/query-history\";\nimport Page from \"./page\";\nimport { addHashChangeListener, removeHashChangeListener } from \"../lib/hash\";\n\nconst KNOWN_CORPORA: readonly Corpus[] = [\n\t{\n\t\tkey: \"web-en\",\n\t\tname: \"English\",\n\t\tlanguage: \"en\",\n\t},\n\t{\n\t\tkey: \"web-de\",\n\t\tname: \"German\",\n\t\tlanguage: \"de\",\n\t},\n];\nconst DEFAULT_CORPUS_KEY = \"web-en\";\n\ninterface State {\n\tcurrentCorpusKey: string;\n\tcorpora: readonly Corpus[];\n\tunavailableCorpora: ReadonlySet<Corpus>;\n\n\tpageQuery: string;\n\tcurrentQuery: string;\n\tqueryId: number;\n\n\thistory: QueryHistory;\n\n\texampleVisibility: ExampleVisibility;\n}\n\nexport default class SearchPage extends React.PureComponent<unknown, State> {\n\treadonly lang = getCurrentLang();\n\tprivate _corporaPromise: CancelablePromise<Readonly<CorporaInfo>> | undefined;\n\tstate: Readonly<State> = {\n\t\t...withCorpus(getPageParam(\"corpus\") || DEFAULT_CORPUS_KEY),\n\t\tcorpora: KNOWN_CORPORA,\n\t\tunavailableCorpora: new Set(),\n\n\t\tpageQuery: getPageParam(\"q\") || \"\",\n\t\tcurrentQuery: \"\",\n\t\tqueryId: nextId(),\n\n\t\texampleVisibility: loadExampleVisibility() ?? \"peek\",\n\t};\n\n\tcomponentDidMount(): void {\n\t\tthis._corporaPromise = new CancelablePromise(Netspeak.instance.queryCorpora());\n\t\tthis._corporaPromise\n\t\t\t.then(info => {\n\t\t\t\tconst available = new Set(info.corpora.map(c => c.key));\n\n\t\t\t\tthis.setState(state => {\n\t\t\t\t\treturn { unavailableCorpora: new Set(state.corpora.filter(c => !available.has(c.key))) };\n\t\t\t\t});\n\t\t\t}, ignoreCanceled)\n\t\t\t.catch(reason => {\n\t\t\t\tthis.setState(state => {\n\t\t\t\t\treturn { unavailableCorpora: new Set(state.corpora) };\n\t\t\t\t});\n\n\t\t\t\tconsole.error(reason);\n\t\t\t});\n\n\t\taddHashChangeListener(this._onHashUpdateHandler);\n\t}\n\tcomponentWillUnmount(): void {\n\t\tthis._corporaPromise?.cancel();\n\n\t\tremoveHashChangeListener(this._onHashUpdateHandler);\n\t}\n\n\tprivate _onHashUpdateHandler = (): void => {\n\t\tconst pageQuery = getPageParam(\"q\") || \"\";\n\t\tconst pageCorpus = getPageParam(\"corpus\");\n\n\t\tthis.setState(state => ({\n\t\t\tpageQuery: pageQuery,\n\t\t\t...withCorpus(pageCorpus || state.currentCorpusKey, state),\n\n\t\t\tcurrentQuery: pageQuery,\n\t\t\tqueryId: pageQuery === state.pageQuery || pageQuery === state.currentQuery ? state.queryId : nextId(),\n\t\t}));\n\t};\n\tprivate _onCorpusSelectedHandler = (corpus: Corpus): void => {\n\t\tthis.setState(state => withCorpus(corpus.key, state));\n\t\tsetPageParam(\"corpus\", corpus.key);\n\t};\n\tprivate _onQueryCommitHandler = (query: string): void => {\n\t\tthis.setState(state => {\n\t\t\tlet history = state.history;\n\t\t\tif (query.trim()) {\n\t\t\t\t// query isn't just spaces\n\t\t\t\thistory = history.push(query);\n\t\t\t\tstoryQueryHistory(state.currentCorpusKey, history);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcurrentQuery: query,\n\t\t\t\thistory,\n\t\t\t};\n\t\t});\n\t\tsetPageParam(\"q\", query);\n\t};\n\tprivate _onSetExampleVisibilityHandler = (visibility: ExampleVisibility): void => {\n\t\tstoreExampleVisibility(visibility);\n\t\tthis.setState({\n\t\t\texampleVisibility: visibility,\n\t\t});\n\t};\n\n\trender(): JSX.Element {\n\t\treturn (\n\t\t\t<Page lang={this.lang} className=\"SearchPage\">\n\t\t\t\t{optional(this.state.corpora.length > 0, () => (\n\t\t\t\t\t<NetspeakCorpusSelector\n\t\t\t\t\t\tlang={this.lang}\n\t\t\t\t\t\tselected={this.state.currentCorpusKey}\n\t\t\t\t\t\tcorpora={this.state.corpora}\n\t\t\t\t\t\tunavailable={this.state.unavailableCorpora}\n\t\t\t\t\t\tonCorpusSelected={this._onCorpusSelectedHandler}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t\t<div className=\"search-wrapper\">\n\t\t\t\t\t<NetspeakSearch\n\t\t\t\t\t\tkey={this.state.queryId + \";\" + this.state.currentCorpusKey}\n\t\t\t\t\t\tlang={this.lang}\n\t\t\t\t\t\tcorpusKey={this.state.currentCorpusKey}\n\t\t\t\t\t\tdefaultQuery={this.state.pageQuery}\n\t\t\t\t\t\tonCommitQuery={this._onQueryCommitHandler}\n\t\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\t\tdefaultExampleVisibility={this.state.exampleVisibility}\n\t\t\t\t\t\tonSetExampleVisibility={this._onSetExampleVisibilityHandler}\n\t\t\t\t\t\tpageSize={40}\n\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Page>\n\t\t);\n\t}\n}\n\nfunction withCorpus(corpusKey: string, state?: Readonly<State>): Pick<State, \"currentCorpusKey\" | \"history\"> {\n\treturn {\n\t\tcurrentCorpusKey: corpusKey,\n\t\thistory: state?.currentCorpusKey === corpusKey ? state.history : loadQueryHistory(corpusKey),\n\t};\n}\n\nfunction getHashParams(): URLSearchParams {\n\ttry {\n\t\treturn new URLSearchParams((location.hash || \"#\").substr(1));\n\t} catch (error) {\n\t\treturn new URLSearchParams(\"\");\n\t}\n}\nfunction setHashParams(params: URLSearchParams): void {\n\tlocation.hash = params.toString();\n}\ntype PageParam = \"q\" | \"corpus\";\nfunction getPageParam(param: PageParam): string | null {\n\treturn getHashParams().get(param);\n}\nfunction setPageParam(param: PageParam, value: string): void {\n\tconst params = getHashParams();\n\tparams.set(param, value);\n\tsetHashParams(params);\n}\n\nfunction loadQueryHistory(corpus: string): QueryHistory {\n\tconst stored = localStorage.getItem(\"queryHistory:\" + corpus);\n\tif (stored) {\n\t\treturn QueryHistory.fromJSON(stored);\n\t} else {\n\t\treturn new QueryHistory();\n\t}\n}\nfunction storyQueryHistory(corpus: string, history: QueryHistory): void {\n\tlocalStorage.setItem(\"queryHistory:\" + corpus, history.toJSON());\n}\n\nfunction loadExampleVisibility(): ExampleVisibility | null {\n\treturn sessionStorage.getItem(\"exampleVisibility\") as ExampleVisibility | null;\n}\nfunction storeExampleVisibility(value: ExampleVisibility): void {\n\tsessionStorage.setItem(\"exampleVisibility\", value);\n}\n","import React from \"react\";\nimport SearchPage from \"../page-elements/search-page\";\nimport { Helmet } from \"react-helmet\";\nimport dynamic from \"../lib/dynamic\";\nimport SharedHead from \"../page-elements/shared-head\";\n\nexport default function Home(): JSX.Element {\n\treturn (\n\t\t<>\n\t\t\t{dynamic(() => (\n\t\t\t\t<SearchPage />\n\t\t\t))}\n\t\t\t<SharedHead />\n\t\t\t<Helmet>\n\t\t\t\t<title>Netspeak</title>\n\t\t\t\t<meta\n\t\t\t\t\tname=\"keywords\"\n\t\t\t\t\tcontent=\"netspeak, common language, dictionary, phrase dictionary, netfreak, net speak, net-speak, net slang, internet slang, net-speak, writing assistant\"\n\t\t\t\t/>\n\t\t\t\t<meta\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tcontent=\"Netspeak helps you to search for words you don't know, yet. It is a new kind of dictionary that contains everything that has ever been written on the web.\"\n\t\t\t\t/>\n\t\t\t</Helmet>\n\t\t</>\n\t);\n}\n"],"sourceRoot":""}