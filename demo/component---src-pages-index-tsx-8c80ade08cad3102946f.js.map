{"version":3,"sources":["webpack:///./src/elements/netspeak-corpus-selector.tsx","webpack:///./src/lib/query-history.ts","webpack:///./src/lib/hash.ts","webpack:///./src/page-elements/search-page.tsx","webpack:///./src/pages/index.tsx"],"names":["NetspeakCorpusSelector","props","corpora","defaultSorting","l","createLocalizer","locales","handleButtonClick","e","corpusKey","currentTarget","value","onCorpusSelected","containsSelectedCorpus","some","c","key","selected","buttons","sort","a","b","indexA","indexOf","indexB","length","map","corpus","i","className","label","name","toLowerCase","onClick","en","de","QueryHistory","items","push","query","this","filter","limit","maxLength","slice","toJSON","JSON","stringify","fromJSON","json","parse","listeners","Set","callAllListeners","forEach","lastHash","undefined","window","addEventListener","location","hash","setInterval","SearchPage","lang","getCurrentLang","state","withCorpusKey","getPageParam","pageQuery","currentQuery","queryId","nextId","exampleVisibility","localStorage","getItem","_onHashUpdateHandler","pageCorpus","setState","_onCorpusSelectedHandler","setPageParam","_onQueryCommitHandler","history","trim","storyQueryHistory","_onSetExampleVisibilityHandler","visibility","setItem","componentDidMount","listener","_corporaPromise","CancelablePromise","Netspeak","instance","queryCorpora","then","info","default","defaultCorpus","ignoreCanceled","add","componentWillUnmount","cancel","delete","render","optional","defaultQuery","onCommitQuery","defaultExampleVisibility","onSetExampleVisibility","pageSize","React","PureComponent","loadQueryHistory","getHashParams","URLSearchParams","substr","error","param","get","params","set","toString","setHashParams","stored","Home","dynamic","Helmet","content"],"mappings":"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","file":"component---src-pages-index-tsx-8c80ade08cad3102946f.js","sourcesContent":["import React from \"react\";\nimport \"./netspeak-corpus-selector.scss\";\nimport { LocalizableProps, Locales, SimpleLocale, createLocalizer } from \"../lib/localize\";\nimport { Corpus } from \"../lib/netspeak\";\n\ninterface Props extends LocalizableProps {\n\tselected: string;\n\tcorpora: readonly Corpus[];\n\tonCorpusSelected: (corpusKey: string) => void;\n}\n\nexport default function NetspeakCorpusSelector(props: Props): JSX.Element {\n\tconst l = createLocalizer(props, locales);\n\tconst handleButtonClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n\t\tconst corpusKey = e.currentTarget.value;\n\t\tprops.onCorpusSelected(corpusKey);\n\t};\n\n\tconst containsSelectedCorpus = props.corpora.some(c => c.key === props.selected);\n\tconst buttons = sortedCorpora(props.corpora).map((corpus, i) => {\n\t\tconst selected = corpus.key === props.selected || (!containsSelectedCorpus && i === 0);\n\t\tconst className = selected ? \"selected\" : \"\";\n\t\tconst label = l((\"label-\" + corpus.name.toLowerCase()) as any) || corpus.name;\n\t\treturn (\n\t\t\t<button key={corpus.key} className={className} value={corpus.key} onClick={handleButtonClick}>\n\t\t\t\t{label}\n\t\t\t</button>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"NetspeakCorpusSelector\">\n\t\t\t<div className=\"wrapper\">{buttons}</div>\n\t\t</div>\n\t);\n}\n\nconst locales: Locales<SimpleLocale<\"label-english\" | \"label-german\">> = {\n\ten: {\n\t\t\"label-english\": \"English\",\n\t\t\"label-german\": \"German\",\n\t},\n\tde: {\n\t\t\"label-english\": \"Englisch\",\n\t\t\"label-german\": \"Deutsch\",\n\t},\n};\n\nfunction sortedCorpora(corpora: Iterable<Corpus>): Corpus[] {\n\tconst defaultSorting = [\"web-en\", \"web-de\"];\n\n\treturn [...corpora].sort((a, b) => {\n\t\tlet indexA = defaultSorting.indexOf(a.key);\n\t\tlet indexB = defaultSorting.indexOf(b.key);\n\t\tif (indexA === -1) indexA = defaultSorting.length;\n\t\tif (indexB === -1) indexB = defaultSorting.length;\n\t\treturn indexA - indexB;\n\t});\n}\n","export class QueryHistory {\n\tconstructor(public readonly items: readonly string[] = []) {}\n\n\tpush(query: string): QueryHistory {\n\t\tif (this.items.some(i => i === query)) {\n\t\t\treturn new QueryHistory([query, ...this.items.filter(i => i !== query)]);\n\t\t} else {\n\t\t\treturn new QueryHistory([query, ...this.items]);\n\t\t}\n\t}\n\tlimit(maxLength: number): QueryHistory {\n\t\tif (this.items.length <= maxLength) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new QueryHistory(this.items.slice(0, maxLength));\n\t\t}\n\t}\n\n\ttoJSON(): string {\n\t\treturn JSON.stringify(this.items);\n\t}\n\tstatic fromJSON(json: string): QueryHistory {\n\t\treturn new QueryHistory(JSON.parse(json));\n\t}\n}\n","export type Listener = () => void;\n\nconst listeners = new Set<Listener>();\nexport function addHashChangeListener(listener: Listener): void {\n\tlisteners.add(listener);\n}\nexport function removeHashChangeListener(listener: Listener): void {\n\tlisteners.delete(listener);\n}\n\nfunction callAllListeners(): void {\n\tlisteners.forEach(l => l());\n}\n\n// This will add a listener for the \"hashchange\" event and it will periodically check the hash in case the event didn't\n// fire for some reason (yes, that happens).\nlet lastHash: string | undefined = undefined;\nif (typeof window !== \"undefined\") {\n\twindow.addEventListener(\"hashchange\", () => {\n\t\tlastHash = location.hash;\n\t\tcallAllListeners();\n\t});\n\tsetInterval(() => {\n\t\tif (lastHash !== undefined) {\n\t\t\tconst hash = location.hash;\n\t\t\tif (lastHash !== hash) {\n\t\t\t\tlastHash = location.hash;\n\t\t\t\tcallAllListeners();\n\t\t\t}\n\t\t}\n\t}, 10);\n}\n","import React from \"react\";\nimport \"./search-page.scss\";\nimport NetspeakCorpusSelector from \"../elements/netspeak-corpus-selector\";\nimport { getCurrentLang } from \"../lib/localize\";\nimport { NetspeakSearch, ExampleVisibility } from \"../elements/netspeak-search\";\nimport { Corpus, CorporaInfo, Netspeak } from \"../lib/netspeak\";\nimport { CancelablePromise, ignoreCanceled } from \"../lib/cancelable-promise\";\nimport { optional, nextId } from \"../lib/util\";\nimport { QueryHistory } from \"../lib/query-history\";\nimport Page from \"./page\";\nimport { addHashChangeListener, removeHashChangeListener } from \"../lib/hash\";\n\ninterface State {\n\tcorpusKey: string;\n\tcorpora: readonly Corpus[];\n\n\tpageQuery: string;\n\tcurrentQuery: string;\n\tqueryId: number;\n\n\thistory: QueryHistory;\n\n\texampleVisibility: ExampleVisibility;\n}\n\nexport default class SearchPage extends React.PureComponent<unknown, State> {\n\treadonly lang = getCurrentLang();\n\tprivate _corporaPromise: CancelablePromise<Readonly<CorporaInfo>> | undefined;\n\tstate: Readonly<State> = {\n\t\t...withCorpusKey(getPageParam(\"corpus\") || \"\"),\n\t\tcorpora: [],\n\n\t\tpageQuery: getPageParam(\"q\") || \"\",\n\t\tcurrentQuery: \"\",\n\t\tqueryId: nextId(),\n\n\t\texampleVisibility: (localStorage.getItem(\"exampleVisibility\") || \"peek\") as ExampleVisibility,\n\t};\n\n\tcomponentDidMount(): void {\n\t\tthis._corporaPromise = new CancelablePromise(Netspeak.instance.queryCorpora());\n\t\tthis._corporaPromise.then(info => {\n\t\t\tthis.setState(state => {\n\t\t\t\treturn {\n\t\t\t\t\t// set the corpus key here if not defined already\n\t\t\t\t\t...withCorpusKey(state.corpusKey || info.default || Netspeak.defaultCorpus, state),\n\t\t\t\t\tcorpora: info.corpora,\n\t\t\t\t};\n\t\t\t});\n\t\t}, ignoreCanceled);\n\n\t\taddHashChangeListener(this._onHashUpdateHandler);\n\t}\n\tcomponentWillUnmount(): void {\n\t\tthis._corporaPromise?.cancel();\n\n\t\tremoveHashChangeListener(this._onHashUpdateHandler);\n\t}\n\n\tprivate _onHashUpdateHandler = (): void => {\n\t\tconst pageQuery = getPageParam(\"q\") || \"\";\n\t\tconst pageCorpus = getPageParam(\"corpus\");\n\n\t\tthis.setState(state => ({\n\t\t\tpageQuery: pageQuery,\n\t\t\t...withCorpusKey(pageCorpus ?? state.corpusKey, state),\n\n\t\t\tcurrentQuery: pageQuery,\n\t\t\tqueryId: pageQuery === state.pageQuery || pageQuery === state.currentQuery ? state.queryId : nextId(),\n\t\t}));\n\t};\n\tprivate _onCorpusSelectedHandler = (corpusKey: string): void => {\n\t\tthis.setState(state => withCorpusKey(corpusKey, state));\n\t\tsetPageParam(\"corpus\", corpusKey);\n\t};\n\tprivate _onQueryCommitHandler = (query: string): void => {\n\t\tthis.setState(state => {\n\t\t\tlet history = state.history;\n\t\t\tif (query.trim()) {\n\t\t\t\t// query isn't just spaces\n\t\t\t\thistory = history.push(query);\n\t\t\t\tstoryQueryHistory(state.corpusKey, history);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcurrentQuery: query,\n\t\t\t\thistory,\n\t\t\t};\n\t\t});\n\t\tsetPageParam(\"q\", query);\n\t};\n\tprivate _onSetExampleVisibilityHandler = (visibility: ExampleVisibility): void => {\n\t\tlocalStorage.setItem(\"exampleVisibility\", visibility);\n\t\tthis.setState({\n\t\t\texampleVisibility: visibility,\n\t\t});\n\t};\n\n\trender(): JSX.Element {\n\t\treturn (\n\t\t\t<Page lang={this.lang} className=\"SearchPage\">\n\t\t\t\t{optional(this.state.corpora.length > 0, () => (\n\t\t\t\t\t<NetspeakCorpusSelector\n\t\t\t\t\t\tlang={this.lang}\n\t\t\t\t\t\tselected={this.state.corpusKey}\n\t\t\t\t\t\tcorpora={this.state.corpora}\n\t\t\t\t\t\tonCorpusSelected={this._onCorpusSelectedHandler}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<div className=\"search-wrapper\">\n\t\t\t\t\t<NetspeakSearch\n\t\t\t\t\t\tkey={this.state.queryId + \";\" + this.state.corpusKey}\n\t\t\t\t\t\tlang={this.lang}\n\t\t\t\t\t\tcorpus={this.state.corpusKey}\n\t\t\t\t\t\tdefaultQuery={this.state.pageQuery}\n\t\t\t\t\t\tonCommitQuery={this._onQueryCommitHandler}\n\t\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\t\tdefaultExampleVisibility={this.state.exampleVisibility}\n\t\t\t\t\t\tonSetExampleVisibility={this._onSetExampleVisibilityHandler}\n\t\t\t\t\t\tpageSize={40}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Page>\n\t\t);\n\t}\n}\n\nfunction withCorpusKey(corpusKey: string, state?: Readonly<State>): Pick<State, \"corpusKey\" | \"history\"> {\n\treturn {\n\t\tcorpusKey,\n\t\thistory: state?.corpusKey === corpusKey ? state.history : loadQueryHistory(corpusKey),\n\t};\n}\n\nfunction getHashParams(): URLSearchParams {\n\ttry {\n\t\treturn new URLSearchParams((location.hash || \"#\").substr(1));\n\t} catch (error) {\n\t\treturn new URLSearchParams(\"\");\n\t}\n}\nfunction setHashParams(params: URLSearchParams): void {\n\tlocation.hash = params.toString();\n}\ntype PageParam = \"q\" | \"corpus\";\nfunction getPageParam(param: PageParam): string | null {\n\treturn getHashParams().get(param);\n}\nfunction setPageParam(param: PageParam, value: string): void {\n\tconst params = getHashParams();\n\tparams.set(param, value);\n\tsetHashParams(params);\n}\n\nfunction loadQueryHistory(corpus: string): QueryHistory {\n\tconst stored = localStorage.getItem(\"queryHistory:\" + corpus);\n\tif (stored) {\n\t\treturn QueryHistory.fromJSON(stored);\n\t} else {\n\t\treturn new QueryHistory();\n\t}\n}\nfunction storyQueryHistory(corpus: string, history: QueryHistory): void {\n\tlocalStorage.setItem(\"queryHistory:\" + corpus, history.toJSON());\n}\n","import React from \"react\";\nimport dynamic from \"../lib/dynamic\";\nimport SearchPage from \"../page-elements/search-page\";\nimport { Helmet } from \"react-helmet\";\nimport GA from \"../page-elements/ga\";\n\nexport default function Home(): JSX.Element {\n\treturn (\n\t\t<>\n\t\t\t{dynamic(() => (\n\t\t\t\t<SearchPage />\n\t\t\t))}\n\t\t\t<Helmet>\n\t\t\t\t<title>Netspeak</title>\n\t\t\t\t<meta\n\t\t\t\t\tname=\"keywords\"\n\t\t\t\t\tcontent=\"netspeak, common language, dictionary, phrase dictionary, netfreak, net speak, net-speak, net slang, internet slang, net-speak, writing assistant\"\n\t\t\t\t/>\n\t\t\t\t<meta\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tcontent=\"Netspeak helps you to search for words you don't know, yet. It is a new kind of dictionary that contains everything that has ever been written on the web.\"\n\t\t\t\t/>\n\t\t\t\t<GA />\n\t\t\t</Helmet>\n\t\t</>\n\t);\n}\n"],"sourceRoot":""}